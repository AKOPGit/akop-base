 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF'
diff --git a/package-lock.json b/package-lock.json
index 8189fa791875866da6b90e56d3353b065515b833..61487ac3232cda1ff35c0aebe331533598ac32c2 100644
--- a/package-lock.json
+++ b/package-lock.json
@@ -1,34 +1,35 @@
 {
     "name": "akop-base",
     "lockfileVersion": 3,
     "requires": true,
     "packages": {
         "": {
             "dependencies": {
                 "prosemirror-commands": "^1.7.1",
                 "prosemirror-history": "^1.4.1",
+                "prosemirror-inputrules": "^1.5.0",
                 "prosemirror-keymap": "^1.2.3",
                 "prosemirror-model": "^1.25.2",
                 "prosemirror-schema-basic": "^1.2.4",
                 "prosemirror-schema-list": "^1.5.1",
                 "prosemirror-state": "^1.4.3",
                 "prosemirror-view": "^1.40.1"
             },
             "devDependencies": {
                 "@tailwindcss/vite": "^4.0.0",
                 "concurrently": "^9.0.1",
                 "laravel-vite-plugin": "^1.2.0",
                 "tailwindcss": "^4.0.0",
                 "vite": "^6.0.11",
                 "vite-plugin-image-optimizer": "^2.0.2"
             }
         },
         "node_modules/@ampproject/remapping": {
             "version": "2.3.0",
             "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
             "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
             "dev": true,
             "license": "Apache-2.0",
             "dependencies": {
                 "@jridgewell/gen-mapping": "^0.3.5",
                 "@jridgewell/trace-mapping": "^0.3.24"
@@ -1789,50 +1790,60 @@
             }
         },
         "node_modules/prosemirror-commands": {
             "version": "1.7.1",
             "resolved": "https://registry.npmjs.org/prosemirror-commands/-/prosemirror-commands-1.7.1.tgz",
             "integrity": "sha512-rT7qZnQtx5c0/y/KlYaGvtG411S97UaL6gdp6RIZ23DLHanMYLyfGBV5DtSnZdthQql7W+lEVbpSfwtO8T+L2w==",
             "license": "MIT",
             "dependencies": {
                 "prosemirror-model": "^1.0.0",
                 "prosemirror-state": "^1.0.0",
                 "prosemirror-transform": "^1.10.2"
             }
         },
         "node_modules/prosemirror-history": {
             "version": "1.4.1",
             "resolved": "https://registry.npmjs.org/prosemirror-history/-/prosemirror-history-1.4.1.tgz",
             "integrity": "sha512-2JZD8z2JviJrboD9cPuX/Sv/1ChFng+xh2tChQ2X4bB2HeK+rra/bmJ3xGntCcjhOqIzSDG6Id7e8RJ9QPXLEQ==",
             "license": "MIT",
             "dependencies": {
                 "prosemirror-state": "^1.2.2",
                 "prosemirror-transform": "^1.0.0",
                 "prosemirror-view": "^1.31.0",
                 "rope-sequence": "^1.3.0"
             }
         },
+        "node_modules/prosemirror-inputrules": {
+            "version": "1.5.0",
+            "resolved": "https://registry.npmjs.org/prosemirror-inputrules/-/prosemirror-inputrules-1.5.0.tgz",
+            "integrity": "sha512-K0xJRCmt+uSw7xesnHmcn72yBGTbY45vm8gXI4LZXbx2Z0jwh5aF9xrGQgrVPu0WbyFVFF3E/o9VhJYz6SQWnA==",
+            "license": "MIT",
+            "dependencies": {
+                "prosemirror-state": "^1.0.0",
+                "prosemirror-transform": "^1.0.0"
+            }
+        },
         "node_modules/prosemirror-keymap": {
             "version": "1.2.3",
             "resolved": "https://registry.npmjs.org/prosemirror-keymap/-/prosemirror-keymap-1.2.3.tgz",
             "integrity": "sha512-4HucRlpiLd1IPQQXNqeo81BGtkY8Ai5smHhKW9jjPKRc2wQIxksg7Hl1tTI2IfT2B/LgX6bfYvXxEpJl7aKYKw==",
             "license": "MIT",
             "dependencies": {
                 "prosemirror-state": "^1.0.0",
                 "w3c-keyname": "^2.2.0"
             }
         },
         "node_modules/prosemirror-model": {
             "version": "1.25.2",
             "resolved": "https://registry.npmjs.org/prosemirror-model/-/prosemirror-model-1.25.2.tgz",
             "integrity": "sha512-BVypCAJ4SL6jOiTsDffP3Wp6wD69lRhI4zg/iT8JXjp3ccZFiq5WyguxvMKmdKFC3prhaig7wSr8dneDToHE1Q==",
             "license": "MIT",
             "dependencies": {
                 "orderedmap": "^2.0.0"
             }
         },
         "node_modules/prosemirror-schema-basic": {
             "version": "1.2.4",
             "resolved": "https://registry.npmjs.org/prosemirror-schema-basic/-/prosemirror-schema-basic-1.2.4.tgz",
             "integrity": "sha512-ELxP4TlX3yr2v5rM7Sb70SqStq5NvI15c0j9j/gjsrO5vaw+fnnpovCLEGIcpeGfifkuqJwl4fon6b+KdrODYQ==",
             "license": "MIT",
             "dependencies": {
diff --git a/package.json b/package.json
index 0bb73980bf68456ea13d53f1f72435fa97e7d701..72d0599beb15821ea2dd4dd9b3585e0123fed427 100644
--- a/package.json
+++ b/package.json
@@ -1,26 +1,27 @@
 {
     "private": true,
     "type": "module",
     "scripts": {
         "build": "vite build && rm -f public/hot",
         "dev": "vite"
     },
     "devDependencies": {
         "@tailwindcss/vite": "^4.0.0",
         "concurrently": "^9.0.1",
         "laravel-vite-plugin": "^1.2.0",
         "tailwindcss": "^4.0.0",
         "vite": "^6.0.11",
         "vite-plugin-image-optimizer": "^2.0.2"
     },
     "dependencies": {
         "prosemirror-commands": "^1.7.1",
         "prosemirror-history": "^1.4.1",
         "prosemirror-keymap": "^1.2.3",
         "prosemirror-model": "^1.25.2",
         "prosemirror-schema-basic": "^1.2.4",
         "prosemirror-schema-list": "^1.5.1",
         "prosemirror-state": "^1.4.3",
-        "prosemirror-view": "^1.40.1"
+        "prosemirror-view": "^1.40.1",
+        "prosemirror-inputrules": "^1.5.0"
     }
 }
diff --git a/resources/css/app.css b/resources/css/app.css
index 4190db44b78a43f25e2e2f88dbdd143d1bf37ab5..634cee69658dba2a354dc599de0cf7bd4bd62729 100644
--- a/resources/css/app.css
+++ b/resources/css/app.css
@@ -177,25 +177,36 @@ [data-tooltip]::before {
     --translate-y: calc(-100% - var(--arrow-size));
     content: attr(data-tooltip);
     width: max-content;
     text-align: center;
     font-size: 0.9rem;
     font-weight: normal;
     padding: .1rem .7rem;
     color: #ece7e7;
     background: var(--tooltip-color);
     border-radius: .3rem;
     border: none;
 }

 [data-tooltip]::after {
     --translate-y: calc(-1 * var(--arrow-size) - 1px);
     content: '';
     border: var(--arrow-size) solid transparent;
     border-top-color: var(--tooltip-color);
     transform-origin: top center;
 }

 [data-tooltip]:hover::before,
 [data-tooltip]:hover::after{
     --scale: 1;
 }
+
+/* Style for rich text editor toolbar */
+[data-rich-text-editor] .toolbar .toolbar-item {
+    @apply rounded-md border border-gray-300 bg-gray-50 px-2 py-1 text-sm text-gray-600 hover:bg-gray-100 active:bg-gray-200 focus:outline-none;
+}
+
+/* Remove focus outline from editor */
+[data-rich-text-editor] .editor .ProseMirror:focus,
+[data-rich-text-editor] .editor .ProseMirror-focused {
+    @apply outline-none;
+}
diff --git a/resources/js/modules/rich-text-editor.js b/resources/js/modules/rich-text-editor.js
index 9088ecf5f6fd3b1c8b1f058f5e0e14616854d204..6659e1585491c507ac8d4b8df4faa5c8754fc8b5 100644
--- a/resources/js/modules/rich-text-editor.js
+++ b/resources/js/modules/rich-text-editor.js
@@ -1,33 +1,34 @@
 import {EditorState} from 'prosemirror-state'
 import {EditorView} from 'prosemirror-view'
 import {Schema, DOMParser as ProseParser, DOMSerializer} from 'prosemirror-model'
 import {schema as basicSchema} from 'prosemirror-schema-basic'
 import {addListNodes, wrapInList} from 'prosemirror-schema-list'
 import {history, undo, redo} from 'prosemirror-history'
 import {keymap} from 'prosemirror-keymap'
 import {baseKeymap, toggleMark, setBlockType, wrapIn} from 'prosemirror-commands'
+import {inputRules, textblockTypeInputRule} from 'prosemirror-inputrules'

 const underline = {
     parseDOM: [{tag: 'u'}, {style: 'text-decoration=underline'}],
     toDOM() { return ['u', 0] }
 }

 const strike = {
     parseDOM: [{tag: 's'}, {tag: 'del'}, {style: 'text-decoration=line-through'}],
     toDOM() { return ['s', 0] }
 }

 export function init() {
     document.querySelectorAll('[data-rich-text-editor]').forEach(container => {
         if (container.editor) return
         const targetId = container.id
         const hidden = document.querySelector(`[data-editor-target="${targetId}"]`)
         const value = hidden ? hidden.value : ''

         const nodes = addListNodes(basicSchema.spec.nodes, 'paragraph block*', 'block')
             .update('paragraph', {
                 content: 'inline*',
                 group: 'block',
                 attrs: {align: {default: 'left'}},
                 parseDOM: [{tag: 'p', getAttrs: dom => ({align: dom.style.textAlign || 'left'})}],
                 toDOM(node) { return ['p', {style: `text-align:${node.attrs.align}`}, 0] }
@@ -38,50 +39,51 @@ export function init() {
                 defining: true,
                 attrs: {level: {default: 1}, align: {default: 'left'}},
                 parseDOM: [
                     {tag: 'h1', getAttrs: dom => ({level:1, align: dom.style.textAlign || 'left'})},
                     {tag: 'h2', getAttrs: dom => ({level:2, align: dom.style.textAlign || 'left'})},
                     {tag: 'h3', getAttrs: dom => ({level:3, align: dom.style.textAlign || 'left'})},
                     {tag: 'h4', getAttrs: dom => ({level:4, align: dom.style.textAlign || 'left'})},
                     {tag: 'h5', getAttrs: dom => ({level:5, align: dom.style.textAlign || 'left'})},
                     {tag: 'h6', getAttrs: dom => ({level:6, align: dom.style.textAlign || 'left'})},
                 ],
                 toDOM(node) { return ['h'+node.attrs.level, {style: `text-align:${node.attrs.align}`}, 0] }
             })

         const marks = basicSchema.spec.marks
             .addBefore('link', 'underline', underline)
             .addToEnd('strike', strike)

         const schema = new Schema({nodes, marks})

         const parser = new DOMParser()
         const content = parser.parseFromString(value || '<p></p>', 'text/html')
         const state = EditorState.create({
             doc: ProseParser.fromSchema(schema).parse(content.body),
             plugins: [
                 history(),
+                inputRules({rules: buildInputRules(schema)}),
                 keymap(baseKeymap)
             ]
         })

         const view = new EditorView(container.querySelector('.editor'), {
             state,
             dispatchTransaction(tr){
                 const newState = view.state.apply(tr)
                 view.updateState(newState)
                 if(hidden){
                     hidden.value = getHTML(view.state.doc, schema)
                 }
             }
         })

         setupToolbar(container, schema, view)
         container.editor = view
     })
 }

 function setupToolbar(container, schema, view){
     container.querySelectorAll('[data-command]').forEach(btn => {
         const cmd = btn.getAttribute('data-command')
         if(cmd === 'heading'){
             btn.addEventListener('change', e => {
@@ -146,25 +148,33 @@ function setupToolbar(container, schema, view){
                 const align = cmd.split('-')[1]
                 setBlockType(getCurrentBlockType(view, schema), {align})(view.state, view.dispatch)
                 view.focus()
             })
         } else if(cmd === 'undo'){
             btn.addEventListener('click', () => { undo(view.state, view.dispatch); view.focus() })
         } else if(cmd === 'redo'){
             btn.addEventListener('click', () => { redo(view.state, view.dispatch); view.focus() })
         }
     })
 }

 function getCurrentBlockType(view, schema){
     const {$from} = view.state.selection
     if($from.parent.type === schema.nodes.heading) return schema.nodes.heading
     if($from.parent.type === schema.nodes.code_block) return schema.nodes.code_block
     if($from.parent.type === schema.nodes.blockquote) return schema.nodes.blockquote
     return schema.nodes.paragraph
 }

 function getHTML(doc, schema){
     const div = document.createElement('div')
     div.appendChild(DOMSerializer.fromSchema(schema).serializeFragment(doc.content))
     return div.innerHTML
 }
+
+function buildInputRules(schema){
+    const rules = []
+    if(schema.nodes.heading){
+        rules.push(textblockTypeInputRule(/^(#{1,6})\s$/, schema.nodes.heading, match => ({level: match[1].length})) )
+    }
+    return rules
+}
diff --git a/resources/views/components/forms/rich-text-editor.blade.php b/resources/views/components/forms/rich-text-editor.blade.php
index dfc0cdb16352f55ca10759b3dbec7a2e01152eaa..50256fa2064c2ea04bba3af9886edfafd7fa588d 100644
--- a/resources/views/components/forms/rich-text-editor.blade.php
+++ b/resources/views/components/forms/rich-text-editor.blade.php
@@ -1,31 +1,31 @@
 @props(['name', 'id' => null, 'value' => ''])
 @php use Illuminate\Support\Str; @endphp
 @php
     $id = $id ?? Str::uuid()->toString();
 @endphp
 <div id="{{ $id }}" data-rich-text-editor class="bg-white p-2 border border-gray-300 rounded-md">
-    <div class="toolbar flex flex-wrap gap-1 mb-2">
-        <select data-command="heading" class="border rounded p-1 text-sm">
+    <div class="toolbar flex flex-wrap gap-1 mb-2 text-gray-600">
+        <select data-command="heading" class="toolbar-item text-sm">
             <option value="0">Parágrafo</option>
             <option value="1">H1</option>
             <option value="2">H2</option>
             <option value="3">H3</option>
         </select>
-        <button type="button" data-command="bold" class="px-1 font-bold">B</button>
-        <button type="button" data-command="italic" class="px-1 italic">I</button>
-        <button type="button" data-command="strike" class="px-1 line-through">S</button>
-        <button type="button" data-command="underline" class="px-1 underline">U</button>
-        <button type="button" data-command="bullet" class="px-1">•</button>
-        <button type="button" data-command="ordered" class="px-1">1.</button>
-        <button type="button" data-command="blockquote" class="px-1">"</button>
-        <button type="button" data-command="code" class="px-1">{ }</button>
-        <button type="button" data-command="link" class="px-1">🔗</button>
-        <button type="button" data-command="align-left" class="px-1">⬅</button>
-        <button type="button" data-command="align-center" class="px-1">↔</button>
-        <button type="button" data-command="align-right" class="px-1">➡</button>
-        <button type="button" data-command="undo" class="px-1">↶</button>
-        <button type="button" data-command="redo" class="px-1">↷</button>
+        <button type="button" data-command="bold" class="toolbar-item font-bold">B</button>
+        <button type="button" data-command="italic" class="toolbar-item italic">I</button>
+        <button type="button" data-command="strike" class="toolbar-item line-through">S</button>
+        <button type="button" data-command="underline" class="toolbar-item underline">U</button>
+        <button type="button" data-command="bullet" class="toolbar-item">•</button>
+        <button type="button" data-command="ordered" class="toolbar-item">1.</button>
+        <button type="button" data-command="blockquote" class="toolbar-item">"</button>
+        <button type="button" data-command="code" class="toolbar-item">{ }</button>
+        <button type="button" data-command="link" class="toolbar-item">🔗</button>
+        <button type="button" data-command="align-left" class="toolbar-item">⬅</button>
+        <button type="button" data-command="align-center" class="toolbar-item">↔</button>
+        <button type="button" data-command="align-right" class="toolbar-item">➡</button>
+        <button type="button" data-command="undo" class="toolbar-item">↶</button>
+        <button type="button" data-command="redo" class="toolbar-item">↷</button>
     </div>
     <div class="editor min-h-[100px] outline-none"></div>
 </div>
 <input type="hidden" name="{{ $name }}" value="{{ $value }}" data-editor-target="{{ $id }}">

EOF
)
